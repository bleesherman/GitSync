{
  "url": "https://api.github.com/repos/ethereum/EIPs/issues/4477",
  "repository_url": "https://api.github.com/repos/ethereum/EIPs",
  "labels_url": "https://api.github.com/repos/ethereum/EIPs/issues/4477/labels{/name}",
  "comments_url": "https://api.github.com/repos/ethereum/EIPs/issues/4477/comments",
  "events_url": "https://api.github.com/repos/ethereum/EIPs/issues/4477/events",
  "html_url": "https://github.com/ethereum/EIPs/issues/4477",
  "id": 1060895400,
  "node_id": "I_kwDOAq426M4_O_qo",
  "number": 4477,
  "title": "[EIP-722] Allow everyone migrate token URI",
  "user": {
    "login": "tvd12",
    "id": 6251901,
    "node_id": "MDQ6VXNlcjYyNTE5MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6251901?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tvd12",
    "html_url": "https://github.com/tvd12",
    "followers_url": "https://api.github.com/users/tvd12/followers",
    "following_url": "https://api.github.com/users/tvd12/following{/other_user}",
    "gists_url": "https://api.github.com/users/tvd12/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tvd12/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tvd12/subscriptions",
    "organizations_url": "https://api.github.com/users/tvd12/orgs",
    "repos_url": "https://api.github.com/users/tvd12/repos",
    "events_url": "https://api.github.com/users/tvd12/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tvd12/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-11-23T06:57:57Z",
  "updated_at": "2021-11-23T07:17:10Z",
  "closed_at": "2021-11-23T07:17:10Z",
  "author_association": "CONTRIBUTOR",
  "active_lock_reason": null,
  "body": "### Introduction\r\n\r\nHi, I see, I see almost NFT applications are using ERC721, so after the NFT start-up trend, there will be many companies that run out of capital and dissolve. At that time they will shutdown their servers and many of the images associated with the NFT will be inaccessible.  Should we need create a contract that allows the holder to update the image URI.\r\n\r\n### Contract Interface\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n// From: youngmonkeys.org\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC722 compliant contract.\r\n * After the NFT start-up trend, there will be many companies that run out of capital and dissolve. \r\n * At that time they will shut down their servers and many of the images associated with the NFT will be inaccessible. \r\n * Should we create a token that allows the holder to update the image URI\r\n */\r\ninterface IERC722 {\r\n\r\n    /**\r\n    * Get the owner of the tokens\r\n    */\r\n    function tokensOwner() external view returns (address);\r\n\r\n    /**\r\n    * Get the contract created the tokens\r\n    */\r\n    function tokensContract() external view returns (address);\r\n\r\n    /**\r\n    * Get the lastest URI of the `tokenId`\r\n    * Requirements:\r\n    *\r\n    * - `tokenId` must exist.\r\n    */\r\n    function latestTokenURI(\r\n        uint256 tokenId\r\n    ) external view returns (string memory);\r\n\r\n    /**\r\n    * Set the lastest URI of the `tokenId`\r\n    * Requirements:\r\n    *\r\n    * - `tokenId` must exist.\r\n    * - `tokenURI` must exist.\r\n    */\r\n    function setLatestTokenURI(\r\n        uint256 tokenId, \r\n        string memory tokenURI\r\n    ) external;\r\n\r\n    /**\r\n    * Set the lastest URI of the `tokenId`\r\n    * Requirements:\r\n    *\r\n    * - `submitter` must exist.\r\n    * - `tokenId` must exist.\r\n    * - `tokenURI` must exist.\r\n    */\r\n    function safeSetLatestTokenURI(\r\n        address submitter, \r\n        uint256 tokenId, \r\n        string memory tokenURI\r\n    ) external;\r\n}\r\n```\r\n\r\n### Implementation\r\n\r\n```solidity\r\n// SPDX-License-Identifier: MIT\r\n// From: youngmonkeys.org\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC722.sol\";\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC722] Replace URI of Non-Fungible Tokens\r\n */\r\ncontract ERC722 is IERC722 {\r\n\r\n    // Owner of the tokens\r\n    address private _tokensOwner;\r\n\r\n    // Contract of the tokens\r\n    address private _tokensContract;\r\n\r\n    // Mapping from token ID to an URI\r\n    mapping(uint256 => string) private _latestTokenURIs;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `tokensOwner` and a `tokensContract`\r\n     */\r\n    constructor(address tokensOwner, address tokensContract) {\r\n        _tokensOwner = tokensOwner_;\r\n        _tokensContract = tokensContract_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function tokensOwner() public view override returns (address) {\r\n        return _tokensOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function tokensContract() public view override returns (address) {\r\n        return _tokensContract;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-latestTokenURI}.\r\n     */\r\n    function latestTokenURI(\r\n        uint256 tokenId\r\n    ) public view override returns (string memory) {\r\n        return _latestTokenURIs[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setLatestTokenURI}.\r\n     */\r\n    function setLatestTokenURI(\r\n        uint256 tokenId, \r\n        string memory tokenURI\r\n    ) public override {\r\n        require(_isTokenOwner(msg.sender), \"You are not the token's owner.\");\r\n        _latestTokenURIs[tokenId] = tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeSetLatestTokenURI}.\r\n     */\r\n    function safeSetLatestTokenURI(\r\n        address submitter,\r\n        uint256 tokenId, \r\n        string memory tokenURI\r\n    ) public override {\r\n        require(_isTokenOwner(submitter), \"Submitter are not the token's owner.\");\r\n        _latestTokenURIs[tokenId] = tokenURI;\r\n    }\r\n\r\n    function isTokenOwner(address sender) internal view virtual returns (bool) {\r\n        return _tokensOwner == sender_;\r\n    }\r\n}\r\n```",
  "closed_by": {
    "login": "tvd12",
    "id": 6251901,
    "node_id": "MDQ6VXNlcjYyNTE5MDE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6251901?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tvd12",
    "html_url": "https://github.com/tvd12",
    "followers_url": "https://api.github.com/users/tvd12/followers",
    "following_url": "https://api.github.com/users/tvd12/following{/other_user}",
    "gists_url": "https://api.github.com/users/tvd12/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tvd12/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tvd12/subscriptions",
    "organizations_url": "https://api.github.com/users/tvd12/orgs",
    "repos_url": "https://api.github.com/users/tvd12/repos",
    "events_url": "https://api.github.com/users/tvd12/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tvd12/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/4477/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/ethereum/EIPs/issues/4477/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
[
  {
    "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/976209102",
    "html_url": "https://github.com/ethereum/EIPs/issues/4477#issuecomment-976209102",
    "issue_url": "https://api.github.com/repos/ethereum/EIPs/issues/4477",
    "id": 976209102,
    "node_id": "IC_kwDOAq426M46L8TO",
    "user": {
      "login": "github-actions[bot]",
      "id": 41898282,
      "node_id": "MDM6Qm90NDE4OTgyODI=",
      "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/github-actions%5Bbot%5D",
      "html_url": "https://github.com/apps/github-actions",
      "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2021-11-23T06:58:45Z",
    "updated_at": "2021-11-23T06:58:45Z",
    "author_association": "NONE",
    "body": "Since this is your first issue, we kindly remind you to check out [EIP-1](https://eips.ethereum.org/EIPS/eip-1) for guidance.\\n\\nIf this issue was created as a “discussions-to” for an EIP or to discuss an idea for an EIP, please close it and create a thread at [Fellowship of Ethereum Magicians](https://ethereum-magicians.org/).",
    "reactions": {
      "url": "https://api.github.com/repos/ethereum/EIPs/issues/comments/976209102/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
